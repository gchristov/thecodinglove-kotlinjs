name: thecodinglove
runtime: yaml
description: Infrastructure as code for the app.

resources:
  # Enables the Firebase API. Needed to enable Firebase.
  # pulumi import gcp:projects/service:Service firebase-api PROJECT_ID/firebase.googleapis.com
  firebase-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: firebase.googleapis.com
    options:
      protect: true
  # Enables Firebase. Needed for Firestore.
  # pulumi import gcp:firebase/project:Project firebase PROJECT_ID
  firebase:
    type: gcp:firebase:Project
    options:
      protect: true
      dependsOn:
        - ${firebase-api}
  # Enables Cloud Resource Manager. Needed for the rest of the resources
  # pulumi import gcp:projects/service:Service cloud-resource-manager-api PROJECT_ID/cloudresourcemanager.googleapis.com
  cloud-resource-manager-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: cloudresourcemanager.googleapis.com
    options:
      protect: true
  # Enables the Firestore API. Needed for Firestore.
  # pulumi import gcp:projects/service:Service firestore-api PROJECT_ID/firestore.googleapis.com
  firestore-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: firestore.googleapis.com
    options:
      protect: true
      dependsOn:
        - ${cloud-resource-manager-api}
  # Manages the Firestore database which the app uses as storage.
  # pulumi import gcp:firestore/database:Database firestore "projects/PROJECT_ID/databases/(default)"
  firestore:
    type: gcp:firestore:Database
    properties:
      appEngineIntegrationMode: DISABLED
      concurrencyMode: PESSIMISTIC
      deleteProtectionState: DELETE_PROTECTION_DISABLED
      locationId: eur3
      name: (default)
      type: FIRESTORE_NATIVE
    options:
      protect: true
      dependsOn:
        - ${firestore-api}
  # Manages the Firestore security rules.
  # pulumi import gcp:firebaserules/ruleset:Ruleset firestore-rules projects/PROJECT_ID/rulesets/RULESET_ID
  firestore-rules:
    type: gcp:firebaserules:Ruleset
    properties:
      source:
        files:
          - content: |-
              rules_version = '2';
              service cloud.firestore {
                match /databases/{database}/documents {
                  match /{document=**} {
                    // Disable public access as we're using Firebase Admin SDK
                    allow read, write: if false;
                  }
                }
              }
            name: firestore.rules
    options:
      protect: true
      dependsOn:
        - ${firestore}
  # Publishes the changes to the Firestore security rules.
  # pulumi import gcp:firebaserules/release:Release firestore-rules-publish projects/PROJECT_ID/releases/cloud.firestore
  firestore-rules-publish:
    type: gcp:firebaserules:Release
    properties:
      name: cloud.firestore
      rulesetName: projects/${firestore-rules.project}/rulesets/${firestore-rules.name}
    options:
      protect: true
  # Enables the Artifact Registry API. Needed for Docker.
  # pulumi import gcp:projects/service:Service artifact-registry-api PROJECT_ID/artifactregistry.googleapis.com
  artifact-registry-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: artifactregistry.googleapis.com
    options:
      protect: true
  # Manages the Docker image repository.
  # pulumi import gcp:artifactregistry/repository:Repository artifact-registry PROJECT_ID/REGION/REPOSITORY_NAME
  artifact-registry:
    type: gcp:artifactregistry:Repository
    properties:
      format: DOCKER
      location: europe-west1
      repositoryId: thecodinglove
    options:
      protect: true
      dependsOn:
        - ${artifact-registry-api}
  # Manages the Docker binary for app-service.
  app-service-binary:
    type: docker:Image
    properties:
      build:
        platform: linux/amd64
        context: ../build/services/app-service
        dockerfile: ../build/services/app-service/Dockerfile
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/app-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Manages the Docker binary for app-service.
  landing-page-service-binary:
    type: docker:Image
    properties:
      build:
        args:
          APP_SERVICE_HOST: https://app-service-xk523rsata-ew.a.run.app
          APP_SERVICE_ROOT: api
        platform: linux/amd64
        context: ../build/services/landing-page-service
        dockerfile: ../build/services/landing-page-service/Dockerfile
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/landing-page-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Enables the Cloud Run Admin API. Needed for Cloud Run.
  # pulumi import gcp:projects/service:Service cloud-run-admin-api PROJECT_ID/run.googleapis.com
  cloud-run-admin-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: run.googleapis.com
    options:
      protect: true
  # Manages the Cloud Run service for app-service.
  # pulumi import gcp:cloudrunv2/service:Service app-service REGION/SERVICE_NAME
  app-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: app-service
      template:
        containers:
          - image: ${app-service-binary.repoDigest}
            ports:
              - containerPort: 8081
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 8081
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 1
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: false
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy for app-service.
  # pulumi import gcp:cloudrunv2/serviceIamPolicy:ServiceIamPolicy app-service-policy projects/PROJECT_ID/locations/REGION/services/SERVICE_NAME
  app-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${app-service.name}
      location: ${app-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true
  # Manages the Cloud Run service for landing-page-service.
  landing-page-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: landing-page-service
      template:
        containers:
          - image: ${landing-page-service-binary.repoDigest}
            ports:
              - containerPort: 80
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 80
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 1
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: false
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy for landing-page-service.
  landing-page-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${landing-page-service.name}
      location: ${landing-page-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true
  # Manages the Cloud Run service domain mapping for landing-page-service.
  landing-page-service-domain-mapping:
    type: gcp:cloudrun:DomainMapping
    properties:
      location: ${landing-page-service.location}
      metadata:
        namespace: ${landing-page-service.project}
      name: thecodinglove.crowdstandout.com
      spec:
        routeName: landing-page-service
    options:
      protect: true
  # Enables the PubSub API.
  # pulumi import gcp:projects/service:Service pubsub-api PROJECT_ID/pubsub.googleapis.com
  pubsub-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: pubsub.googleapis.com
    options:
      protect: true
  # Manages the preload search PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-preload-search TOPIC
  pubsub-topic-preload-search:
    type: gcp:pubsub:Topic
    properties:
      name: preload_search
    options:
      protect: true
  # Manages the preload search PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-preload-search SUBSCRIPTION
  pubsub-subscription-preload-search:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: preload_search_subscription
      pushConfig:
        pushEndpoint: ${app-service.uri}/api/pubsub/search
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-preload-search.name}
    options:
      protect: true
  # Manages the dev preload search PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-preload-search-dev TOPIC
  pubsub-topic-preload-search-dev:
    type: gcp:pubsub:Topic
    properties:
      name: preload_search_dev
    options:
      protect: true
  # Manages the dev preload search PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-preload-search-dev SUBSCRIPTION
  pubsub-subscription-preload-search-dev:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: preload_search_dev_subscription
      pushConfig:
        # TODO: Un-hardcode the URL
        pushEndpoint: https://codinglove.serveo.net/api/pubsub/search
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-preload-search-dev.name}
    options:
      protect: true
  # Manages the Slack interactivity PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-slack-interactivity TOPIC
  pubsub-topic-slack-interactivity:
    type: gcp:pubsub:Topic
    properties:
      name: slack_interactivity
    options:
      protect: true
  # Manages the Slack interactivity PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-slack-interactivity SUBSCRIPTION
  pubsub-subscription-slack-interactivity:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_interactivity_subscription
      pushConfig:
        pushEndpoint: ${app-service.uri}/api/pubsub/slack/interactivity
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-interactivity.name}
    options:
      protect: true
  # Manages the dev Slack interactivity PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-slack-interactivity-dev TOPIC
  pubsub-topic-slack-interactivity-dev:
    type: gcp:pubsub:Topic
    properties:
      name: slack_interactivity_dev
    options:
      protect: true
  # Manages the dev Slack interactivity PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-slack-interactivity-dev SUBSCRIPTION
  pubsub-subscription-slack-interactivity-dev:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_interactivity_dev_subscription
      pushConfig:
        # TODO: Un-hardcode the URL
        pushEndpoint: https://codinglove.serveo.net/api/pubsub/slack/interactivity
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-interactivity-dev.name}
    options:
      protect: true
  # Manages the Slack slash command PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-slack-slash-command TOPIC
  pubsub-topic-slack-slash-command:
    type: gcp:pubsub:Topic
    properties:
      name: slack_slash_command
    options:
      protect: true
  # Manages the Slack slash command PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-slack-slash-command SUBSCRIPTION
  pubsub-subscription-slack-slash-command:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_slash_command_subscription
      pushConfig:
        pushEndpoint: ${app-service.uri}/api/pubsub/slack/slash
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-slash-command.name}
    options:
      protect: true
  # Manages the dev Slack slash command PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-slack-slash-command-dev TOPIC
  pubsub-topic-slack-slash-command-dev:
    type: gcp:pubsub:Topic
    properties:
      name: slack_slash_command_dev
    options:
      protect: true
  # Manages the dev Slack slash command PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-slack-slash-command-dev SUBSCRIPTION
  pubsub-subscription-slack-slash-command-dev:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_slash_command_dev_subscription
      pushConfig:
        # TODO: Un-hardcode the URL
        pushEndpoint: https://codinglove.serveo.net/api/pubsub/slack/slash
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-slash-command-dev.name}
    options:
      protect: true
  # Manages the post self-destruct timer.
  self-destruct-timer-job:
    type: gcp:cloudscheduler:Job
    properties:
      name: self-destruct-timer
      schedule: "*/5 * * * *"
      timeZone: Etc/UTC
      region: ${app-service.location}
      httpTarget:
        uri: ${app-service.uri}/api/self-destruct
        httpMethod: GET
      retryConfig:
        retryCount: 5
        maxRetryDuration: 600s
        maxBackoffDuration: 600s
        minBackoffDuration: 10s
        maxDoublings: 5
    options:
      protect: true
