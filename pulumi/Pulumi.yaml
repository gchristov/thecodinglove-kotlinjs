name: thecodinglove
runtime: yaml
description: Infrastructure as code for the app.

variables:
  domain: thecodinglove.crowdstandout.com

resources:

  ########################################
  # APIs
  ########################################

  # Enables Cloud Resource Manager API. Needed for some the resources.
  # pulumi import gcp:projects/service:Service cloud-resource-manager-api PROJECT_ID/cloudresourcemanager.googleapis.com
  cloud-resource-manager-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: cloudresourcemanager.googleapis.com
    options:
      protect: true
  # Enables the Artifact Registry API. Needed for Docker.
  artifact-registry-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: artifactregistry.googleapis.com
    options:
      protect: true
  # Enables Firebase API. Needed for Firestore.
  firebase-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: firebase.googleapis.com
    options:
      protect: true
  # Enables the Firestore API.
  firestore-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: firestore.googleapis.com
    options:
      protect: true
      dependsOn:
        - ${cloud-resource-manager-api}
  # Enables the Cloud Run Admin API.
  cloud-run-admin-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: run.googleapis.com
    options:
      protect: true
  # Enables the PubSub API.
  pubsub-api:
    type: gcp:projects:Service
    properties:
      disableDependentServices: true
      service: pubsub.googleapis.com
    options:
      protect: true

  ########################################
  # Artifact Registry
  ########################################

  # Manages a Docker image repository.
  # Example: pulumi import gcp:artifactregistry/repository:Repository artifact-registry PROJECT_ID/REGION/REPOSITORY_NAME
  artifact-registry:
    type: gcp:artifactregistry:Repository
    properties:
      format: DOCKER
      location: europe-west1
      repositoryId: thecodinglove
    options:
      protect: true
      dependsOn:
        - ${artifact-registry-api}

  ########################################
  # Firebase
  ########################################

  # Enables Firebase.
  # Example: pulumi import gcp:firebase/project:Project firebase PROJECT_ID
  firebase:
    type: gcp:firebase:Project
    options:
      protect: true
      dependsOn:
        - ${firebase-api}
  # Manages a Firestore database.
  # Example: pulumi import gcp:firestore/database:Database firestore "projects/PROJECT_ID/databases/(default)"
  firestore:
    type: gcp:firestore:Database
    properties:
      appEngineIntegrationMode: DISABLED
      concurrencyMode: PESSIMISTIC
      deleteProtectionState: DELETE_PROTECTION_DISABLED
      locationId: eur3
      name: (default)
      type: FIRESTORE_NATIVE
    options:
      protect: true
      dependsOn:
        - ${firestore-api}
  # Manages Firestore security rules.
  # Example: pulumi import gcp:firebaserules/ruleset:Ruleset firestore-rules projects/PROJECT_ID/rulesets/RULESET_ID. You
  # can obtain the ruleset id by inspecting the network calls in GCP.
  firestore-rules:
    type: gcp:firebaserules:Ruleset
    properties:
      source:
        files:
          - content: |-
              rules_version = '2';
              service cloud.firestore {
                match /databases/{database}/documents {
                  match /{document=**} {
                    // Disable public access as we're using Firebase Admin SDK
                    allow read, write: if false;
                  }
                }
              }
            name: firestore.rules
    options:
      protect: true
      dependsOn:
        - ${firestore}
  # Manages Firestore security rules updates.
  # Example: pulumi import gcp:firebaserules/release:Release firestore-rules-publish projects/PROJECT_ID/releases/cloud.firestore
  firestore-rules-publish:
    type: gcp:firebaserules:Release
    properties:
      name: cloud.firestore
      rulesetName: projects/${firestore-rules.project}/rulesets/${firestore-rules.name}
    options:
      protect: true

  ########################################
  # search-service
  ########################################

  # Manages the binary.
  search-service-binary:
    type: docker:Image
    properties:
      build:
        args:
          PORT: "8081"
          API_URL: https://${domain}/api
          PRELOAD_SEARCH_PUBSUB_TOPIC: preload_search
        platform: linux/amd64
        context: ../search/service/build/dist/js
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/search-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Manages the Cloud Run service.
  # pulumi import gcp:cloudrunv2/service:Service search-service REGION/SERVICE_NAME
  search-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: search-service
      template:
        containers:
          - image: ${search-service-binary.repoDigest}
            ports:
              - containerPort: 8081
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 8081
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 0
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: true
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy.
  # pulumi import gcp:cloudrunv2/serviceIamPolicy:ServiceIamPolicy search-service-policy projects/PROJECT_ID/locations/REGION/services/SERVICE_NAME
  search-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${search-service.name}
      location: ${search-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true

  ########################################
  # statistics-service
  ########################################

  # Manages the binary.
  statistics-service-binary:
    type: docker:Image
    properties:
      build:
        args:
          PORT: "8082"
          API_URL: https://${domain}/api
        platform: linux/amd64
        context: ../statistics/service/build/dist/js
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/statistics-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Manages the Cloud Run service.
  statistics-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: statistics-service
      template:
        containers:
          - image: ${statistics-service-binary.repoDigest}
            ports:
              - containerPort: 8082
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 8082
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 0
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: true
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy.
  statistics-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${statistics-service.name}
      location: ${statistics-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true

  ########################################
  # self-destruct-service
  ########################################

  # Manages the binary.
  self-destruct-service-binary:
    type: docker:Image
    properties:
      build:
        args:
          PORT: "8083"
          API_URL: https://${domain}/api
        platform: linux/amd64
        context: ../self-destruct/service/build/dist/js
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/self-destruct-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Manages the Cloud Run service.
  self-destruct-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: self-destruct-service
      template:
        containers:
          - image: ${self-destruct-service-binary.repoDigest}
            ports:
              - containerPort: 8083
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 8083
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 0
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: true
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy.
  self-destruct-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${self-destruct-service.name}
      location: ${self-destruct-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true

  ########################################
  # slack-service
  ########################################

  # Manages the binary.
  slack-service-binary:
    type: docker:Image
    properties:
      build:
        args:
          PORT: "8084"
          API_URL: https://${domain}/api
          SLACK_REQUEST_VERIFICATION: "true"
          SLACK_SLASH_COMMAND_PUBSUB_TOPIC: slack_slash_command
          SLACK_INTERACTIVITY_PUBSUB_TOPIC: slack_interactivity
        platform: linux/amd64
        context: ../slack/service/build/dist/js
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/slack-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Manages the Cloud Run service.
  slack-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: slack-service
      template:
        containers:
          - image: ${slack-service-binary.repoDigest}
            ports:
              - containerPort: 8084
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 8084
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 1
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: true
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy.
  slack-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${slack-service.name}
      location: ${slack-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true

  ########################################
  # landing-page-service
  ########################################

  # Manages the binary.
  landing-page-service-binary:
    type: docker:Image
    properties:
      build:
        args:
          SEARCH_SERVICE_HOST: ${search-service.uri}
          SEARCH_SERVICE_PATH: api/search
          SEARCH_SERVICE_PUBSUB_PATH: api/pubsub/search
          STATISTICS_SERVICE_HOST: ${statistics-service.uri}
          STATISTICS_SERVICE_PATH: api/statistics
          SELF_DESTRUCT_SERVICE_HOST: ${self-destruct-service.uri}
          SELF_DESTRUCT_SERVICE_PATH: api/self-destruct
          SLACK_SERVICE_HOST: ${slack-service.uri}
          SLACK_SERVICE_PATH: api/slack
          SLACK_SERVICE_PUBSUB_PATH: api/pubsub/slack
        platform: linux/amd64
        context: ../landing-page/service/build/dist/js
      imageName: ${artifact-registry.location}-docker.pkg.dev/${artifact-registry.project}/${artifact-registry.repositoryId}/landing-page-service:latest
      registry:
        server: ${artifact-registry.location}-docker.pkg.dev
        username: _json_key
        password:
          fn::secret:
            fn::readFile: credentials-gcp-infra.json
    options:
      protect: true
  # Manages the Cloud Run service.
  landing-page-service:
    type: gcp:cloudrunv2:Service
    properties:
      ingress: INGRESS_TRAFFIC_ALL
      location: ${artifact-registry.location}
      name: landing-page-service
      template:
        containers:
          - image: ${landing-page-service-binary.repoDigest}
            ports:
              - containerPort: 80
                name: http1
            resources:
              cpuIdle: true
              limits:
                cpu: 1000m
                memory: 512Mi
            startupProbe:
              failureThreshold: 1
              periodSeconds: 240
              tcpSocket:
                port: 80
              timeoutSeconds: 240
        maxInstanceRequestConcurrency: 80
        scaling:
          maxInstanceCount: 100
          minInstanceCount: 1
        timeout: 300s
      traffics:
        - percent: 100
          type: TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST
    options:
      protect: true
      dependsOn:
        - ${cloud-run-admin-api}
  # Manages the Cloud Run service policy.
  landing-page-service-policy:
    type: gcp:cloudrunv2:ServiceIamPolicy
    properties:
      name: ${landing-page-service.name}
      location: ${landing-page-service.location}
      policyData: |
        {
          "bindings": [
            {
              "role": "roles/run.invoker",
              "members": [
                "allUsers"
              ]
            }
          ]
        }
    options:
      protect: true
  # Manages the Cloud Run service domain mapping.
  landing-page-service-domain-mapping:
    type: gcp:cloudrun:DomainMapping
    properties:
      location: ${landing-page-service.location}
      metadata:
        namespace: ${landing-page-service.project}
      name: ${domain}
      spec:
        routeName: landing-page-service
    options:
      protect: true

  ########################################
  # Pub/Sub
  ########################################

  # Manages the preload search PubSub topic.
  # pulumi import gcp:pubsub/topic:Topic pubsub-topic-preload-search TOPIC
  pubsub-topic-preload-search:
    type: gcp:pubsub:Topic
    properties:
      name: preload_search
    options:
      protect: true
  # Manages the preload search PubSub subscription.
  # pulumi import gcp:pubsub/subscription:Subscription pubsub-subscription-preload-search SUBSCRIPTION
  pubsub-subscription-preload-search:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: preload_search_subscription
      pushConfig:
        pushEndpoint: ${search-service.uri}/api/pubsub/search
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-preload-search.name}
    options:
      protect: true
  # Manages the dev preload search PubSub topic.
  pubsub-topic-preload-search-dev:
    type: gcp:pubsub:Topic
    properties:
      name: preload_search_dev
    options:
      protect: true
  # Manages the dev preload search PubSub subscription.
  pubsub-subscription-preload-search-dev:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: preload_search_dev_subscription
      pushConfig:
        # TODO: Un-hardcode the URL
        pushEndpoint: https://codinglove.serveo.net/api/pubsub/search
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-preload-search-dev.name}
    options:
      protect: true
  # Manages the Slack interactivity PubSub topic.
  pubsub-topic-slack-interactivity:
    type: gcp:pubsub:Topic
    properties:
      name: slack_interactivity
    options:
      protect: true
  # Manages the Slack interactivity PubSub subscription.
  pubsub-subscription-slack-interactivity:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_interactivity_subscription
      pushConfig:
        pushEndpoint: ${slack-service.uri}/api/pubsub/slack/interactivity
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-interactivity.name}
    options:
      protect: true
  # Manages the dev Slack interactivity PubSub topic.
  pubsub-topic-slack-interactivity-dev:
    type: gcp:pubsub:Topic
    properties:
      name: slack_interactivity_dev
    options:
      protect: true
  # Manages the dev Slack interactivity PubSub subscription.
  pubsub-subscription-slack-interactivity-dev:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_interactivity_dev_subscription
      pushConfig:
        # TODO: Un-hardcode the URL
        pushEndpoint: https://codinglove.serveo.net/api/pubsub/slack/interactivity
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-interactivity-dev.name}
    options:
      protect: true
  # Manages the Slack slash command PubSub topic.
  pubsub-topic-slack-slash-command:
    type: gcp:pubsub:Topic
    properties:
      name: slack_slash_command
    options:
      protect: true
  # Manages the Slack slash command PubSub subscription.
  pubsub-subscription-slack-slash-command:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_slash_command_subscription
      pushConfig:
        pushEndpoint: ${slack-service.uri}/api/pubsub/slack/slash
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-slash-command.name}
    options:
      protect: true
  # Manages the dev Slack slash command PubSub topic.
  pubsub-topic-slack-slash-command-dev:
    type: gcp:pubsub:Topic
    properties:
      name: slack_slash_command_dev
    options:
      protect: true
  # Manages the dev Slack slash command PubSub subscription.
  pubsub-subscription-slack-slash-command-dev:
    type: gcp:pubsub:Subscription
    properties:
      ackDeadlineSeconds: 10
      expirationPolicy:
        ttl: ""
      messageRetentionDuration: 600s
      name: slack_slash_command_dev_subscription
      pushConfig:
        # TODO: Un-hardcode the URL
        pushEndpoint: https://codinglove.serveo.net/api/pubsub/slack/slash
      retryPolicy:
        maximumBackoff: 600s
        minimumBackoff: 10s
      topic: ${pubsub-topic-slack-slash-command-dev.name}
    options:
      protect: true

  ########################################
  # Cloud Scheduler
  ########################################

  # Manages the post self-destruct timer.
  self-destruct-timer-job:
    type: gcp:cloudscheduler:Job
    properties:
      name: self-destruct-timer
      schedule: "*/5 * * * *"
      timeZone: Etc/UTC
      region: ${self-destruct-service.location}
      httpTarget:
        uri: ${self-destruct-service.uri}/api/self-destruct
        httpMethod: GET
      retryConfig:
        retryCount: 5
        maxRetryDuration: 600s
        maxBackoffDuration: 600s
        minBackoffDuration: 10s
        maxDoublings: 5
    options:
      protect: true
